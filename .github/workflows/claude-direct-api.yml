name: Claude Direct API

on:
  repository_dispatch:
    types: [claude-bug-analysis]

jobs:
  analyze-with-claude:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # Create prompt for Claude
      - name: Create Claude Prompt
        id: create_prompt
        run: |
          echo "Creating prompt for Claude with bug details"
          # Save the prompt to a file
          cat << EOF > claude_prompt.txt
          You are a senior iOS developer working on a Netflix clone app. A bug has been reported:

          **Bug Title:** ${{ github.event.client_payload.title }}
          **Bug Description:** ${{ github.event.client_payload.description }}

          Please analyze this bug and provide:
          1. **Root Cause Analysis** - What likely causes this issue?
          2. **Code Location** - Which files/functions are probably involved?
          3. **Fix Implementation** - Specific code changes needed
          4. **Testing Strategy** - How to verify the fix works
          
          Focus on iOS, Swift and UIKit best practices.
          EOF
          
          echo "Prompt created:"
          cat claude_prompt.txt
      
      # Call Claude API directly
      - name: Call Claude API
        id: claude_api
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Prepare request data
          echo "Calling Claude API directly..."
          
          # Read the prompt from file
          PROMPT=$(cat claude_prompt.txt)
          
          # Create JSON request data
          JSON_DATA=$(cat << EOF
          {
            "model": "claude-sonnet-4-20250514",
            "messages": [
              {
                "role": "system",
                "content": "You are a precise and helpful iOS developer specialized in Swift and UIKit. You analyze bugs in code and provide clear, actionable solutions with code examples."
              },
              {
                "role": "user",
                "content": "$PROMPT"
              }
            ],
            "max_tokens": 4000,
            "temperature": 0.2
          }
          EOF
          )
          
          # Call the API
          RESPONSE=$(curl -s -X POST \
            https://eng-ai-model-gateway.sfproxy.devx-preprod.aws-esvc1-useast2.aws.sfdc.cl/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ANTHROPIC_API_KEY" \
            -d "$JSON_DATA")
          
          # Extract Claude's response
          CLAUDE_CONTENT=$(echo $RESPONSE | jq -r '.choices[0].message.content')
          
          # Save response to file
          echo "$CLAUDE_CONTENT" > claude_analysis.md
          
          echo "Claude API response saved to claude_analysis.md"
          
          # Save a short preview for the output
          echo "$CLAUDE_CONTENT" | head -n 20 > claude_preview.txt
      
      # Instead of creating an issue, save the analysis to the workflow outputs
      - name: Save Claude Analysis
        id: save_analysis
        run: |
          echo "Claude's analysis has been saved to claude_analysis.md"
          
          # Save the content to the workflow summary
          echo "## 🐛 Bug Analysis: ${{ github.event.client_payload.title }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Description:** ${{ github.event.client_payload.description }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Claude's Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat claude_analysis.md >> $GITHUB_STEP_SUMMARY
          
          # Create a file with the full analysis (including timestamp) for archiving
          mkdir -p claude_analyses
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          ANALYSIS_FILE="claude_analyses/bug_analysis_${TIMESTAMP}.md"
          
          cat > $ANALYSIS_FILE << EOF
          # Bug Analysis: ${{ github.event.client_payload.title }}
          
          **Date:** $(date)
          
          ## Bug Report
          
          **Title:** ${{ github.event.client_payload.title }}
          **Description:** ${{ github.event.client_payload.description }}
          
          ## Claude's Analysis
          
          $(cat claude_analysis.md)
          
          ---
          *This analysis was generated automatically by Claude AI via direct API call.*
          EOF
          
          echo "Analysis saved to $ANALYSIS_FILE"
          
          # Set outputs even without creating an issue
          echo "analysis_file=$ANALYSIS_FILE" >> $GITHUB_OUTPUT
      
      # Create a minimal summary (full analysis already saved in previous step)
      - name: Log Analysis Completion
        run: |
          echo "## 🤖 Bug Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Analysis file: ${{ steps.save_analysis.outputs.analysis_file }}" >> $GITHUB_STEP_SUMMARY
          
      # Archive the analysis as an artifact
      - name: Upload Analysis Artifact
        uses: actions/upload-artifact@v3
        with:
          name: claude-bug-analysis-${{ github.event.client_payload.title }}
          path: claude_analysis.md