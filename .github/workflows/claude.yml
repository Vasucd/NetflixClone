name: Claude Code

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      bug_title:
        description: 'Bug Title'
        required: true
        type: string
      bug_description:
        description: 'Bug Description'
        required: true
        type: string

# Add permissions for OIDC token
permissions:
  contents: read
  id-token: write
  issues: write
  pull-requests: write

jobs:
  claude:
    runs-on: self-hosted  # Use self-hosted runner
    # Run for comments that mention @claude, issues with @claude, or workflow_dispatch
    if: contains(github.event.comment.body, '@claude') || (github.event_name == 'issues' && contains(github.event.issue.body, '@claude')) || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # Set up environment before running Claude
      - name: Set up Claude environment
        run: |
          echo "Setting up Claude environment variables"
          echo "ANTHROPIC_BASE_URL=https://eng-ai-model-gateway.sfproxy.devx-preprod.aws-esvc1-useast2.aws.sfdc.cl/chat/completions" >> $GITHUB_ENV
          echo "ANTHROPIC_API_BASE=https://eng-ai-model-gateway.sfproxy.devx-preprod.aws-esvc1-useast2.aws.sfdc.cl/chat/completions" >> $GITHUB_ENV
          echo "CLAUDE_CODE_USE_DIRECT_COMPLETION_ENDPOINT=1" >> $GITHUB_ENV
          # Set the model identifier directly in environment variables
          echo "ANTHROPIC_MODEL=claude-sonnet-4-20250514" >> $GITHUB_ENV
          echo "Environment variables set"
      
      - name: Create issue for Claude to process
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `[Auto-Generated] ${{ inputs.bug_title }}`;
            const body = `**Bug Report from API:**
            
            **Title:** ${{ inputs.bug_title }}
            **Description:** ${{ inputs.bug_description }}
            
            @claude Please analyze this bug and provide Swift code fixes for our iOS Netflix clone app.`;
            
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body
            });
            
            console.log(`Created issue #${issue.number}: ${issue.html_url}`);
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install requests
      
      - name: Call Claude API and Create PR
        run: |
          python3 - << 'EOF'
          import requests
          import os
          import json
          import base64
          from datetime import datetime
          
          # Get inputs
          if "${{ github.event_name }}" == "workflow_dispatch":
              title = "${{ inputs.bug_title }}"
              description = "${{ inputs.bug_description }}"
          else:
              title = "${{ github.event.issue.title }}"
              description = "${{ github.event.issue.body }}"
          
          print(f"Processing bug: {title}")
          
          # Claude API call using your working endpoint
          def get_claude_analysis(title, description):
              api_key = "${{ secrets.ANTHROPIC_API_KEY }}"
              url = 'https://eng-ai-model-gateway.sfproxy.devx-preprod.aws-esvc1-useast2.aws.sfdc.cl/chat/completions'
              
              headers = {
                  'Authorization': f'Bearer {api_key}',
                  'Content-Type': 'application/json'
              }
              
              prompt = f"""You are a senior iOS developer working on a Netflix clone app. A bug has been reported:
              
              **Bug Title:** {title}
              **Bug Description:** {description}
              
              Please provide ACTUAL CODE IMPLEMENTATIONS to fix this bug. For each file that needs to be modified, provide:
              
              1. **File Path**: Exact path from project root (e.g., NetflixClone/Controllers/HomeViewController.swift)
              2. **Complete Fixed Code**: The entire fixed file content, not just snippets
              
              Format your response with clear file markers like:
              ### File: NetflixClone/Controllers/HomeViewController.swift
              ```swift
              // Complete file content here
              ```
              """
              
              data = {
                  "model": "claude-sonnet-4-20250514",
                  "max_tokens": 4000,
                  "messages": [{"role": "user", "content": prompt}]
              }
              
              try:
                  response = requests.post(url, headers=headers, json=data, verify=False)
                  if response.status_code == 200:
                      result = response.json()
                      return result['choices'][0]['message']['content']
                  else:
                      print(f"Claude API Error: {response.status_code} - {response.text}")
                      return f"Error: {response.status_code} - {response.text}"
              except Exception as e:
                  print(f"Claude API Exception: {str(e)}")
                  return f"Exception: {str(e)}"
          
          # Get Claude's analysis
          claude_response = get_claude_analysis(title, description)
          print("Claude analysis completed")
          print(f"Response: {claude_response[:200]}...")
          
          # Create GitHub issue with analysis
          def create_analysis_issue(title, description, analysis):
              github_token = "${{ secrets.GITHUB_TOKEN }}"
              headers = {
                  'Authorization': f'token {github_token}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              
              issue_body = f"""**Bug Report from API:**
              
              **Title:** {title}
              **Description:** {description}
              
              **Claude's Code Analysis & Implementation:**
              
              {analysis}
              """
              
              issue_data = {
                  'title': f'[Claude Analysis] {title}',
                  'body': issue_body
              }
              
              try:
                  response = requests.post(
                      'https://api.github.com/repos/Vasucd/NetflixClone/issues',
                      headers=headers,
                      json=issue_data
                  )
                  if response.status_code == 201:
                      issue = response.json()
                      print(f"✅ Created issue: {issue['html_url']}")
                      return True
                  else:
                      print(f"❌ Failed to create issue: {response.status_code} - {response.text}")
                      return False
              except Exception as e:
                  print(f"❌ Exception creating issue: {str(e)}")
                  return False
          
          # Create the issue with analysis
          create_analysis_issue(title, description, claude_response)
          EOF
        env:
          PYTHONHTTPSVERIFY: 0