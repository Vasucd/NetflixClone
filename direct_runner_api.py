#!/usr/bin/env python3
"""
Direct Runner API - Triggers Self-Hosted Runner Directly
Bypasses GitHub issues and calls Claude directly on your runner
Then creates draft PRs with Claude's suggestions
"""

from flask import Flask, request, jsonify
import requests
import os
import json
import subprocess
import tempfile
from datetime import datetime

app = Flask(__name__)

def create_draft_pr(title, description, claude_response):
    """Create a draft PR with Claude's analysis and suggested fixes"""
    
    github_token = os.getenv('GITHUB_TOKEN')
    if not github_token:
        return {
            'success': False,
            'error': 'GITHUB_TOKEN not found in environment'
        }
    
    repo_owner = 'Vasucd'
    repo_name = 'NetflixClone'
    base_branch = 'main'
    
    try:
        # Create a unique branch name
        timestamp = datetime.now().strftime('%Y%m%d-%H%M%S')
        branch_name = f"claude-fix/{title.lower().replace(' ', '-')}-{timestamp}"
        
        # Step 1: Get the main branch SHA
        main_url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/git/refs/heads/{base_branch}'
        headers = {
            'Authorization': f'token {github_token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        main_response = requests.get(main_url, headers=headers)
        if not main_response.ok:
            return {
                'success': False,
                'error': f'Failed to get main branch: {main_response.status_code}'
            }
        
        main_sha = main_response.json()['object']['sha']
        
        # Step 2: Create a new branch
        create_branch_url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/git/refs'
        branch_data = {
            'ref': f'refs/heads/{branch_name}',
            'sha': main_sha
        }
        
        branch_response = requests.post(create_branch_url, headers=headers, json=branch_data)
        if not branch_response.ok:
            return {
                'success': False,
                'error': f'Failed to create branch: {branch_response.status_code}'
            }
        
        # Step 3: Create a commit with Claude's analysis (as a README file)
        commit_message = f"Claude AI Analysis: {title}"
        analysis_content = f"""# Bug Analysis Report
Generated by Claude AI on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Original Bug Report
**Title:** {title}
**Description:** {description}

## Claude's Analysis
{claude_response}

---
*This analysis was generated automatically by Claude AI. Please review and implement the suggested fixes.*
"""
        
        # Encode content to base64
        import base64
        encoded_content = base64.b64encode(analysis_content.encode()).decode()
        
        # Create file
        file_path = f"CLAUDE_ANALYSIS_{timestamp}.md"
        create_file_url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/contents/{file_path}'
        file_data = {
            'message': commit_message,
            'content': encoded_content,
            'branch': branch_name
        }
        
        file_response = requests.put(create_file_url, headers=headers, json=file_data)
        if not file_response.ok:
            return {
                'success': False,
                'error': f'Failed to create file: {file_response.status_code}'
            }
        
        # Step 4: Create draft pull request
        pr_url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/pulls'
        pr_title = f"ü§ñ Claude AI Fix: {title}"
        pr_body = f"""## üêõ Bug Report
**Title:** {title}
**Description:** {description}

## ü§ñ Claude AI Analysis
{claude_response}

## üìù Next Steps
1. Review Claude's analysis in the attached file: `{file_path}`
2. Implement the suggested code changes
3. Test the fixes thoroughly
4. Update this PR with your implementation

---
*This draft PR was automatically created by Claude AI. The analysis is provided as guidance - please review and implement appropriate fixes.*
"""
        
        pr_data = {
            'title': pr_title,
            'body': pr_body,
            'head': branch_name,
            'base': base_branch,
            'draft': True
        }
        
        pr_response = requests.post(pr_url, headers=headers, json=pr_data)
        
        if pr_response.ok:
            pr_info = pr_response.json()
            return {
                'success': True,
                'pr_number': pr_info['number'],
                'pr_url': pr_info['html_url'],
                'branch_name': branch_name,
                'analysis_file': file_path
            }
        else:
            return {
                'success': False,
                'error': f'Failed to create PR: {pr_response.status_code}',
                'details': pr_response.text[:200]
            }
            
    except Exception as e:
        return {
            'success': False,
            'error': f'PR creation failed: {str(e)}'
        }

def trigger_claude_directly(title, description):
    """Directly trigger Claude analysis without GitHub issues"""
    
    # Load Claude environment variables
    claude_env = os.environ.copy()
    
    # Set up Claude environment
    claude_env.update({
        'ANTHROPIC_BASE_URL': 'https://eng-ai-model-gateway.sfproxy.devx-preprod.aws-esvc1-useast2.aws.sfdc.cl/chat/completions',
        'ANTHROPIC_API_BASE': 'https://eng-ai-model-gateway.sfproxy.devx-preprod.aws-esvc1-useast2.aws.sfdc.cl/chat/completions',
        'CLAUDE_CODE_USE_DIRECT_COMPLETION_ENDPOINT': '1',
        'ANTHROPIC_MODEL': 'claude-sonnet-4-20250514'
    })
    
    # Create a prompt for Claude
    claude_prompt = f"""You are a senior iOS developer working on a Netflix clone app. A bug has been reported:

**Bug Title:** {title}
**Bug Description:** {description}
**Platform:** iOS (Swift/UIKit)
**Reported:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Please analyze this bug and provide:
1. **Root Cause Analysis** - What likely causes this issue?
2. **Code Location** - Which files/functions are probably involved?
3. **Fix Implementation** - Specific code changes needed
4. **Testing Strategy** - How to verify the fix works
5. **Prevention** - How to avoid similar issues

Focus on Swift/UIKit best practices and iOS development patterns.
Provide concrete, actionable recommendations.
"""
    
    try:
        # Use the test_claude_bot.py script to get Claude response
        script_path = os.path.join(os.path.dirname(__file__), 'test_claude_bot.py')
        
        # Run Claude bot with the bug description
        result = subprocess.run([
            'python3', script_path, claude_prompt
        ], 
        capture_output=True, 
        text=True, 
        env=claude_env,
        timeout=60
        )
        
        if result.returncode == 0:
            # Parse the output to extract Claude's response
            output_lines = result.stdout.split('\n')
            
            # Find the response section
            response_start = False
            claude_response = []
            
            for line in output_lines:
                if 'Claude response:' in line:
                    response_start = True
                    continue
                elif '---' in line and response_start:
                    continue
                elif response_start and line.strip():
                    claude_response.append(line)
            
            response_text = '\n'.join(claude_response) if claude_response else result.stdout
            
            return {
                'success': True,
                'claude_response': response_text,
                'analysis_time': datetime.now().isoformat(),
                'method': 'direct_runner'
            }
        else:
            return {
                'success': False,
                'error': f'Claude execution failed: {result.stderr}',
                'stdout': result.stdout
            }
            
    except subprocess.TimeoutExpired:
        return {
            'success': False,
            'error': 'Claude analysis timed out (60 seconds)'
        }
    except Exception as e:
        return {
            'success': False,
            'error': f'Failed to run Claude: {str(e)}'
        }

def trigger_claude_via_api(title, description):
    """Alternative: Direct API call to Claude"""
    
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    # Get API key from environment
    api_key = os.getenv('ANTHROPIC_API_KEY') or os.getenv('ANTHROPIC_AUTH_TOKEN')
    
    if not api_key:
        return {
            'success': False,
            'error': 'No Claude API key found in environment'
        }
    
    url = 'https://eng-ai-model-gateway.sfproxy.devx-preprod.aws-esvc1-useast2.aws.sfdc.cl/chat/completions'
    
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    prompt = f"""Analyze this iOS bug report:

**Title:** {title}
**Description:** {description}

Provide analysis and fix recommendations for this Netflix clone app bug."""
    
    data = {
        'model': 'claude-sonnet-4-20250514',
        'messages': [
            {
                'role': 'system',
                'content': 'You are a senior iOS developer specializing in Swift and UIKit. Analyze bugs and provide specific, actionable solutions.'
            },
            {
                'role': 'user',
                'content': prompt
            }
        ],
        'max_tokens': 1500,
        'temperature': 0.3
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=30, verify=False)
        
        if response.ok:
            result = response.json()
            content = result.get('choices', [{}])[0].get('message', {}).get('content', 'No response')
            
            return {
                'success': True,
                'claude_response': content,
                'analysis_time': datetime.now().isoformat(),
                'method': 'direct_api'
            }
        else:
            return {
                'success': False,
                'error': f'Claude API error: {response.status_code}',
                'details': response.text[:200]
            }
            
    except Exception as e:
        return {
            'success': False,
            'error': f'API call failed: {str(e)}'
        }

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'Direct Runner API',
        'description': 'Triggers Claude directly without GitHub issues',
        'endpoints': {
            'POST /analyze-bug': 'Direct Claude analysis',
            'POST /analyze-bug-script': 'Use test_claude_bot.py script',
            'GET /health': 'Health check'
        }
    })

@app.route('/analyze-bug', methods=['POST'])
def analyze_bug():
    """
    Directly analyze a bug with Claude (via API)
    
    Expected JSON:
    {
        "title": "App crashes on login",
        "description": "When user taps login button with empty fields, app crashes"
    }
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                'success': False,
                'error': 'No JSON data provided'
            }), 400
        
        title = data.get('title', '').strip()
        description = data.get('description', '').strip()
        
        if not title or not description:
            return jsonify({
                'success': False,
                'error': 'Both title and description are required'
            }), 400
        
        # Trigger Claude directly via API
        result = trigger_claude_via_api(title, description)
        
        if result['success']:
            # Create draft PR with Claude's analysis
            pr_result = create_draft_pr(title, description, result['claude_response'])
            
            response_data = {
                'success': True,
                'bug_title': title,
                'bug_description': description,
                'claude_analysis': result['claude_response'],
                'analysis_time': result['analysis_time'],
                'method': result['method']
            }
            
            if pr_result['success']:
                response_data.update({
                    'draft_pr_created': True,
                    'pr_number': pr_result['pr_number'],
                    'pr_url': pr_result['pr_url'],
                    'branch_name': pr_result['branch_name'],
                    'analysis_file': pr_result['analysis_file']
                })
            else:
                response_data.update({
                    'draft_pr_created': False,
                    'pr_error': pr_result['error']
                })
            
            return jsonify(response_data), 200
        else:
            return jsonify({
                'success': False,
                'error': 'Claude analysis failed',
                'details': result.get('error', 'Unknown error')
            }), 500
            
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Internal server error: {str(e)}'
        }), 500

@app.route('/analyze-bug-script', methods=['POST'])
def analyze_bug_script():
    """
    Analyze bug using the test_claude_bot.py script
    
    Expected JSON:
    {
        "title": "App crashes on login",
        "description": "When user taps login button with empty fields, app crashes"
    }
    """
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                'success': False,
                'error': 'No JSON data provided'
            }), 400
        
        title = data.get('title', '').strip()
        description = data.get('description', '').strip()
        
        if not title or not description:
            return jsonify({
                'success': False,
                'error': 'Both title and description are required'
            }), 400
        
        # Trigger Claude using the script
        result = trigger_claude_directly(title, description)
        
        if result['success']:
            # Create draft PR with Claude's analysis
            pr_result = create_draft_pr(title, description, result['claude_response'])
            
            response_data = {
                'success': True,
                'bug_title': title,
                'bug_description': description,
                'claude_analysis': result['claude_response'],
                'analysis_time': result['analysis_time'],
                'method': result['method']
            }
            
            if pr_result['success']:
                response_data.update({
                    'draft_pr_created': True,
                    'pr_number': pr_result['pr_number'],
                    'pr_url': pr_result['pr_url'],
                    'branch_name': pr_result['branch_name'],
                    'analysis_file': pr_result['analysis_file']
                })
            else:
                response_data.update({
                    'draft_pr_created': False,
                    'pr_error': pr_result['error']
                })
            
            return jsonify(response_data), 200
        else:
            return jsonify({
                'success': False,
                'error': 'Claude analysis failed',
                'details': result.get('error', 'Unknown error')
            }), 500
            
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Internal server error: {str(e)}'
        }), 500

if __name__ == '__main__':
    print("üöÄ Starting Direct Runner API Server...")
    print("üìã This API triggers Claude directly on your machine")
    print("üìã Then creates draft PRs with Claude's analysis!")
    print("")
    print("üìã Available Endpoints:")
    print("  GET  /health                - Health check")
    print("  POST /analyze-bug           - Direct Claude analysis + Draft PR")
    print("  POST /analyze-bug-script    - Claude analysis (via script) + Draft PR")
    print("")
    print("üîß Requirements:")
    print("  ‚úÖ Claude environment variables loaded")
    print("  ‚úÖ GITHUB_TOKEN environment variable set")
    print("  ‚úÖ test_claude_bot.py script working")
    print("")
    
    app.run(host='0.0.0.0', port=8000, debug=True) 